#ifndef INPUTSIGNATURE_H_
#define INPUTSIGNATURE_H_

#include <vector>
using namespace std;

#include "IOModule.h"

class 	Packet;


enum 	signatureType {
	SIGNATURE_TYPE_XOR=1,
	SIGNATURE_TYPE_MD5,
	SIGNATURE_TYPE_LAST	
};

/** A data structure to hold all of the relevant information regarding
 * a signature request
 */
struct 	SignatureRequest {
	/** The type of signature to generate on the data
	 */
	signatureType		m_sigType;
	
	/** An offset into the data if applicable 
	 */
	int					m_nOffset;
	
	/** The type of the offset into the data
	 */
	int					m_nOffsetType;	
};


/** Generic input module for computing signatures of incoming
 * packets and then adding the computed signature as a piece of
 * packet information to the packet.  
 */
class InputSignature : public IOModule {
	public:
		InputSignature ();
		
		~InputSignature ();

		/** Initialize an input module by applying any necessary 
		 * startup functionality such as threads, thread safety, or 
		 * other initializations. 
		 * @returns True if successful, false otherwise
		 */
		char		initialize ();	

		/** Process a packet coming along the input chain. Appropriately
		 * process the packet and/or create packets for output based on this
		 * packet. The actual chaining is taken care of at the Adapter level
		 * when the input chain is started upon reception of a packet.
		 * @param pPacket A valid Packet object for processing
		 * @returns 1 if this function has gobbled it (no more processing) or
		 *          0 if the packet should be processed by future modules
		 */ 
		char		processPacket (Packet * pPacket);

		/** Add a type of signature generated by the input module
		 * @param theSig The signature to add to this module
		 */
		void		addSignatureType (SignatureRequest theSig);

		/** Parse the DOM to populate the file where the DOM
		 * is generated from an XML input file. The DOM should contain
		 * the type of adapter and the underlying input and output
		 * modules. The extractExtended function takes in the 
		 * extended information specific to the child class. 
		 * @param pNode The base node to process for information
		 * @returns True if successful, false otherwise
		 */		
		 bool		extractExtendedDOM (NodeDOM * pNode);

	protected:
		/** Filter out unwanted packets that should not have a signature computed
		 * for them.  Examples might include ignoring MD5 computations on ARP
		 * packets.
		 * @param pPacket The packet to check versus the filter
		 * @returns 0 if the packet should be processed, 1 if it should be ignored
		 */
		char		shouldIgnorePacket (Packet * pPacket);
	
	
		/** Compute and add the signatures as applicable to the packet
		 * @param pPacket The packet to compute the signatures on
		 */
		void		computeSignatures (Packet * pPacket);

	private:
		/** The signatures requested for generation at this input module
		 */
		vector<SignatureRequest>		m_SigRequests;
};

#endif /*INPUTSIGNATURE_H_*/
